// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/korovindenis/go-pc-metrics/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the storage type
type Storage struct {
	mock.Mock
}

// GetAllData provides a mock function with given fields: ctx
func (_m *Storage) GetAllData(ctx context.Context) (entity.MetricsType, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllData")
	}

	var r0 entity.MetricsType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entity.MetricsType, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entity.MetricsType); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(entity.MetricsType)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCounter provides a mock function with given fields: ctx, counterName
func (_m *Storage) GetCounter(ctx context.Context, counterName string) (int64, error) {
	ret := _m.Called(ctx, counterName)

	if len(ret) == 0 {
		panic("no return value specified for GetCounter")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, counterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, counterName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, counterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGauge provides a mock function with given fields: ctx, gaugeName
func (_m *Storage) GetGauge(ctx context.Context, gaugeName string) (float64, error) {
	ret := _m.Called(ctx, gaugeName)

	if len(ret) == 0 {
		panic("no return value specified for GetGauge")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, error)); ok {
		return rf(ctx, gaugeName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, gaugeName)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, gaugeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *Storage) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAllData provides a mock function with given fields: ctx, metrics
func (_m *Storage) SaveAllData(ctx context.Context, metrics []entity.Metrics) error {
	ret := _m.Called(ctx, metrics)

	if len(ret) == 0 {
		panic("no return value specified for SaveAllData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.Metrics) error); ok {
		r0 = rf(ctx, metrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCounter provides a mock function with given fields: ctx, counterName, counterValue
func (_m *Storage) SaveCounter(ctx context.Context, counterName string, counterValue int64) error {
	ret := _m.Called(ctx, counterName, counterValue)

	if len(ret) == 0 {
		panic("no return value specified for SaveCounter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, counterName, counterValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveGauge provides a mock function with given fields: ctx, gaugeName, gaugeValue
func (_m *Storage) SaveGauge(ctx context.Context, gaugeName string, gaugeValue float64) error {
	ret := _m.Called(ctx, gaugeName, gaugeValue)

	if len(ret) == 0 {
		panic("no return value specified for SaveGauge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(ctx, gaugeName, gaugeValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
