// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/korovindenis/go-pc-metrics/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the usecase type
type Usecase struct {
	mock.Mock
}

// GetAllDataUsecase provides a mock function with given fields: ctx
func (_m *Usecase) GetAllDataUsecase(ctx context.Context) (entity.MetricsType, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllDataUsecase")
	}

	var r0 entity.MetricsType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entity.MetricsType, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entity.MetricsType); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(entity.MetricsType)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCounterUsecase provides a mock function with given fields: ctx, counterName
func (_m *Usecase) GetCounterUsecase(ctx context.Context, counterName string) (int64, error) {
	ret := _m.Called(ctx, counterName)

	if len(ret) == 0 {
		panic("no return value specified for GetCounterUsecase")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, counterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, counterName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, counterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGaugeUsecase provides a mock function with given fields: ctx, gaugeName
func (_m *Usecase) GetGaugeUsecase(ctx context.Context, gaugeName string) (float64, error) {
	ret := _m.Called(ctx, gaugeName)

	if len(ret) == 0 {
		panic("no return value specified for GetGaugeUsecase")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, error)); ok {
		return rf(ctx, gaugeName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, gaugeName)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, gaugeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *Usecase) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAllDataBatchUsecase provides a mock function with given fields: ctx, metrics
func (_m *Usecase) SaveAllDataBatchUsecase(ctx context.Context, metrics []entity.Metrics) error {
	ret := _m.Called(ctx, metrics)

	if len(ret) == 0 {
		panic("no return value specified for SaveAllDataBatchUsecase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.Metrics) error); ok {
		r0 = rf(ctx, metrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAllDataUsecase provides a mock function with given fields: ctx, metrics
func (_m *Usecase) SaveAllDataUsecase(ctx context.Context, metrics []entity.Metrics) error {
	ret := _m.Called(ctx, metrics)

	if len(ret) == 0 {
		panic("no return value specified for SaveAllDataUsecase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.Metrics) error); ok {
		r0 = rf(ctx, metrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCounterUsecase provides a mock function with given fields: ctx, counterName, counterValue
func (_m *Usecase) SaveCounterUsecase(ctx context.Context, counterName string, counterValue int64) error {
	ret := _m.Called(ctx, counterName, counterValue)

	if len(ret) == 0 {
		panic("no return value specified for SaveCounterUsecase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, counterName, counterValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveGaugeUsecase provides a mock function with given fields: ctx, gaugeName, gaugeValue
func (_m *Usecase) SaveGaugeUsecase(ctx context.Context, gaugeName string, gaugeValue float64) error {
	ret := _m.Called(ctx, gaugeName, gaugeValue)

	if len(ret) == 0 {
		panic("no return value specified for SaveGaugeUsecase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(ctx, gaugeName, gaugeValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
